name: setup kind cluster

on:
    workflow_dispatch:

jobs:
    setup-infra:
        runs-on: [self-hosted, kind-runner]
        steps:
            - name: checkout
              uses: actions/checkout@v3 
            
            - name: check and install docker
              run: 
                | 
                if ! command -v docker &> /dev/null; then
                    echo "docker not installed"
                    echo "installing docker ..................."
                    sudo apt-get update
                    sudo apt-get install -y apt-transport-https ca-certificates curl gnupg-agent software-properties-common
                    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
                    sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
                    sudo apt-get update
                    sudo apt-get install -y docker-ce docker-ce-cli containerd.io
                    sudo usermod -aG docker ${USER}
                    newgrp docker
                    echo "docker installed successfully"
                else
                    echo "docker is already installed"
                fi
            
            
            - name: check and install kind
              run: 
                | 
                if ! command -v kind &> /dev/null; then
                    echo "kind not installed"
                    echo "installing kind ......................" 
                    wget https://github.com/kubernetes-sigs/kind/releases/download/v0.18.0/kind-linux-amd64
                    sudo mv kind-linux-amd64 /usr/local/bin/kind
                    sudo chmod +x /usr/local/bin/kind
                    echo "kind installed successfully"
                else
                    echo "kind is already installed"
                fi

            - name: check and install kubectl
              run:
                | 
                if ! command -v kubectl &> /dev/null; then
                    echo "kubectl not installed"
                    echo "installing kubectl ....................."
                    curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
                    sudo mv kubectl /usr/local/bin
                    sudo chmod +x /usr/local/bin/kubectl
                    kubectl version --client
                    echo "kubectl installed successfully"
                else
                    echo "kubectl is already installed"
                fi
            - name: Debug working directory
              run: |
                  pwd
                  ls -R

            - name: check and create app cluster
              run:
                | 
                if ! kind get clusters | grep -q "apps-cluster"; then 
                    echo "app-cluster not found"
                    echo "creating app-cluster ...................."
                    kind create cluster --name apps-cluster --config clusters/app-cluster.yaml
                else
                    echo "apps-cluster already exists."
                fi
            
            - name: check and create datalake cluster
              run:
                |
                if ! kind get clusters | grep -q "datalake-cluster"; then
                     echo "datalake-cluster not found"
                     echo "creating datalake cluster ..............."
                     kind create cluster --name datalake-cluster --config  clusters/datalake-cluster.yaml
                else
                    echo "datalake cluster already exists."
                fi
            - name: set kubectl context to apps-cluster
              run:
                  |
                  kubectl config use-context kind-apps-cluster
            - name: Install Argo CD CLI
              run: |
                    if ! command -v argocd &> /dev/null; then
                      echo "Installing Argo CD CLI..."
                      curl -sSL -o argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
                      chmod +x argocd
                      sudo mv argocd /usr/local/bin/
                    else
                      echo "Argo CD CLI already installed."
                    fi
            
            - name: Check and Install Argo CD
              run: 
                 |
                  echo "Checking if Argo CD is already installed..."
                  if ! kubectl get ns argocd &> /dev/null; then
                    echo "argocd namespace not found; installing and creating namespace"
                    kubectl create namespace argocd
                    kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
                  else
                    echo "Argo CD is already installed. Skipping installation."
                  fi
            
            - name: Wait for Argo CD server to be ready
              if: success()
              run: |
                    kubectl -n argocd rollout status deploy/argocd-server --timeout=180s
            
            - name: Port-forward Argo CD UI (for local access)
              run: |
                      nohup kubectl port-forward svc/argocd-server -n argocd 8080:443 &
            
            - name: Show Argo CD login instructions (no password printed)
              run: |
                        echo "🔐 Argo CD is now installed."
                        echo "🌐 Open: https://localhost:8080"
                        echo "👤 Username: admin"
                        echo "🔑 To get the password, run this:"
                        echo 'kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d && echo'
              

            
  
